schema {
  query: DagitQuery
  mutation: DagitMutation
  subscription: DagitSubscription
}

directive @specifiedBy(
  url: String!
) on SCALAR
union AddDynamicPartitionResult =
    AddDynamicPartitionSuccess
  | UnauthorizedError
  | PythonError
  | DuplicateDynamicPartitionError
type AddDynamicPartitionSuccess {
  partitionsDefName: String!
  partitionKey: String!
}

type AlertFailureEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

type AlertStartEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

type AlertSuccessEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

type ArrayConfigType implements ConfigType & WrappingConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  ofType: ConfigType!
}

type Asset {
  id: String!
  key: AssetKey!
  assetMaterializations(
    partitions: [String!]
    partitionInLast: Int
    beforeTimestampMillis: String
    afterTimestampMillis: String
    limit: Int
    tags: [InputTag!]
  ): [MaterializationEvent!]!
  assetObservations(
    partitions: [String!]
    partitionInLast: Int
    beforeTimestampMillis: String
    afterTimestampMillis: String
    limit: Int
  ): [ObservationEvent!]!
  definition: AssetNode
}

type AssetBackfillData {
  assetBackfillStatuses: [AssetBackfillStatus!]!
  rootAssetTargetedRanges: [PartitionKeyRange!]
  rootAssetTargetedPartitions: [String!]
}

union AssetBackfillStatus = AssetPartitionsStatusCounts | UnpartitionedAssetStatus
type AssetConnection {
  nodes: [Asset!]!
}

type AssetDependency {
  asset: AssetNode!
  inputName: String!
}

type AssetFreshnessInfo {
  currentMinutesLate: Float
  latestMaterializationMinutesLate: Float
}

type AssetGroup {
  groupName: String!
  assetKeys: [AssetKey!]!
}

input AssetGroupSelector {
  groupName: String!
  repositoryName: String!
  repositoryLocationName: String!
}

type AssetKey {
  path: [String!]!
}

input AssetKeyInput {
  path: [String!]!
}

type AssetLatestInfo {
  assetKey: AssetKey!
  latestMaterialization: MaterializationEvent
  unstartedRunIds: [String!]!
  inProgressRunIds: [String!]!
  latestRun: Run
}

type AssetLineageInfo {
  assetKey: AssetKey!
  partitions: [String!]!
}

type AssetMaterializationPlannedEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
  assetKey: AssetKey
  runOrError: RunOrError!
}

type AssetMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  assetKey: AssetKey!
}

type AssetNode {
  assetKey: AssetKey!
  assetMaterializations(
    partitions: [String!]
    beforeTimestampMillis: String
    limit: Int
  ): [MaterializationEvent!]!
  assetMaterializationUsedData(
    timestampMillis: String!
  ): [MaterializationUpstreamDataVersion!]!
  assetObservations(
    partitions: [String!]
    beforeTimestampMillis: String
    limit: Int
  ): [ObservationEvent!]!
  computeKind: String
  configField: ConfigTypeField
  currentDataVersion: String
  dependedBy: [AssetDependency!]!
  dependedByKeys: [AssetKey!]!
  dependencies: [AssetDependency!]!
  dependencyKeys: [AssetKey!]!
  description: String
  freshnessInfo: AssetFreshnessInfo
  freshnessPolicy: FreshnessPolicy
  autoMaterializePolicy: AutoMaterializePolicy
  graphName: String
  groupName: String
  id: ID!
  isObservable: Boolean!
  isPartitioned: Boolean!
  isSource: Boolean!
  jobNames: [String!]!
  jobs: [Pipeline!]!
  latestMaterializationByPartition(
    partitions: [String!]
  ): [MaterializationEvent]!
  latestRunForPartition(partition: String!): Run
  assetPartitionStatuses: AssetPartitionStatuses!
  partitionStats: PartitionStats
  metadataEntries: [MetadataEntry!]!
  op: SolidDefinition
  opName: String
  opNames: [String!]!
  opVersion: String
  partitionDefinition: PartitionDefinition
  partitionKeys: [String!]!
  partitionKeysByDimension(
    startIdx: Int
    endIdx: Int
  ): [DimensionPartitionKeys!]!
  repository: Repository!
  requiredResources: [ResourceRequirement!]!
  staleStatus: StaleStatus
  staleCauses: [StaleCause!]!
  type: DagsterType
  hasMaterializePermission: Boolean!
}

type AssetNodeDefinitionCollision {
  assetKey: AssetKey!
  repositories: [Repository!]!
}

union AssetNodeOrError = AssetNode | AssetNotFoundError
type AssetNotFoundError implements Error {
  message: String!
}

union AssetOrError = Asset | AssetNotFoundError
type AssetPartitionsStatusCounts {
  assetKey: AssetKey!
  numPartitionsTargeted: Int!
  numPartitionsInProgress: Int!
  numPartitionsMaterialized: Int!
  numPartitionsFailed: Int!
}

union AssetPartitionStatuses = DefaultPartitionStatuses | MultiPartitionStatuses | TimePartitionStatuses
union AssetsOrError = AssetConnection | PythonError
union AssetWipeMutationResult = AssetNotFoundError | UnauthorizedError | PythonError | AssetWipeSuccess
type AssetWipeSuccess {
  assetKeys: [AssetKey!]!
}

type AutoMaterializeAssetEvaluationNeedsMigrationError implements Error {
  message: String!
}

type AutoMaterializeAssetEvaluationRecord {
  id: ID!
  evaluationId: Int!
  numRequested: Int!
  numSkipped: Int!
  numDiscarded: Int!
  conditions: [AutoMaterializeCondition!]!
  timestamp: Float!
}

type AutoMaterializeAssetEvaluationRecords {
  records: [AutoMaterializeAssetEvaluationRecord!]!
  currentEvaluationId: Int
}

union AutoMaterializeAssetEvaluationRecordsOrError =
    AutoMaterializeAssetEvaluationRecords
  | AutoMaterializeAssetEvaluationNeedsMigrationError
union AutoMaterializeCondition =
    FreshnessAutoMaterializeCondition
  | DownstreamFreshnessAutoMaterializeCondition
  | ParentMaterializedAutoMaterializeCondition
  | MissingAutoMaterializeCondition
  | ParentOutdatedAutoMaterializeCondition
  | MaxMaterializationsExceededAutoMaterializeCondition
interface AutoMaterializeConditionWithDecisionType {
  decisionType: AutoMaterializeDecisionType!
  partitionKeysOrError: PartitionKeysOrError
}

enum AutoMaterializeDecisionType {
  MATERIALIZE
  SKIP
  DISCARD
}

type AutoMaterializePolicy {
  policyType: AutoMaterializePolicyType!
  maxMaterializationsPerMinute: Int
}

enum AutoMaterializePolicyType {
  EAGER
  LAZY
}

type BackfillNotFoundError implements Error {
  message: String!
  backfillId: String!
}

type BoolMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  boolValue: Boolean
}

enum BulkActionStatus {
  REQUESTED
  COMPLETED
  FAILED
  CANCELED
  CANCELING
}

union CancelBackfillResult = CancelBackfillSuccess | UnauthorizedError | PythonError
type CancelBackfillSuccess {
  backfillId: String!
}

type CapturedLogs {
  logKey: [String!]!
  stdout: String
  stderr: String
  cursor: String
}

type CapturedLogsMetadata {
  stdoutDownloadUrl: String
  stdoutLocation: String
  stderrDownloadUrl: String
  stderrLocation: String
}

type CompositeConfigType implements ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  fields: [ConfigTypeField!]!
}

type CompositeSolidDefinition implements ISolidDefinition & SolidContainer {
  name: String!
  description: String
  metadata: [MetadataItemDefinition!]!
  inputDefinitions: [InputDefinition!]!
  outputDefinitions: [OutputDefinition!]!
  assetNodes: [AssetNode!]!
  id: ID!
  solids: [Solid!]!
  solidHandle(handleID: String!): SolidHandle
  solidHandles(parentHandleID: String): [SolidHandle!]!
  modes: [Mode!]!
  inputMappings: [InputMapping!]!
  outputMappings: [OutputMapping!]!
}

enum ComputeIOType {
  STDOUT
  STDERR
}

type ComputeLogFile {
  path: String!
  data: String
  cursor: Int!
  size: Int!
  downloadUrl: String
}

type ComputeLogs {
  runId: String!
  stepKey: String!
  stdout: ComputeLogFile
  stderr: ComputeLogFile
}

type ConcurrencyKeyInfo {
  concurrencyKey: String!
  slotCount: Int!
  activeSlotCount: Int!
  activeRunIds: [String!]!
  pendingStepCount: Int!
  pendingStepRunIds: [String!]!
  assignedStepCount: Int!
  assignedStepRunIds: [String!]!
}

interface ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
}

type ConfigTypeField {
  name: String!
  description: String
  configType: ConfigType!
  configTypeKey: String!
  isRequired: Boolean!
  defaultValueAsJson: String
}

type ConfigTypeNotFoundError implements Error {
  message: String!
  pipeline: Pipeline!
  configTypeName: String!
}

union ConfigTypeOrError =
    EnumConfigType
  | CompositeConfigType
  | RegularConfigType
  | PipelineNotFoundError
  | ConfigTypeNotFoundError
  | PythonError
type ConfiguredValue {
  key: String!
  value: String!
  type: ConfiguredValueType!
}

enum ConfiguredValueType {
  VALUE
  ENV_VAR
}

type ConflictingExecutionParamsError implements Error {
  message: String!
}

scalar Cursor

type DaemonHealth {
  id: String!
  daemonStatus(daemonType: String): DaemonStatus!
  allDaemonStatuses: [DaemonStatus!]!
}

type DaemonStatus {
  daemonType: String!
  id: ID!
  required: Boolean!
  healthy: Boolean
  lastHeartbeatTime: Float
  lastHeartbeatErrors: [PythonError!]!
}

type DagitMutation {
  launchPipelineExecution(executionParams: ExecutionParams!): LaunchRunResult!
  launchRun(executionParams: ExecutionParams!): LaunchRunResult!
  launchPipelineReexecution(
    executionParams: ExecutionParams
    reexecutionParams: ReexecutionParams
  ): LaunchRunReexecutionResult!
  launchRunReexecution(
    executionParams: ExecutionParams
    reexecutionParams: ReexecutionParams
  ): LaunchRunReexecutionResult!
  startSchedule(scheduleSelector: ScheduleSelector!): ScheduleMutationResult!
  stopRunningSchedule(
    scheduleOriginId: String!
    scheduleSelectorId: String!
  ): ScheduleMutationResult!
  startSensor(sensorSelector: SensorSelector!): SensorOrError!
  setSensorCursor(
    cursor: String
    sensorSelector: SensorSelector!
  ): SensorOrError!
  stopSensor(
    jobOriginId: String!
    jobSelectorId: String!
  ): StopSensorMutationResultOrError!
  sensorDryRun(
    cursor: String
    selectorData: SensorSelector!
  ): SensorDryRunResult!
  scheduleDryRun(
    selectorData: ScheduleSelector!
    timestamp: Float
  ): ScheduleDryRunResult!
  terminatePipelineExecution(
    runId: String!
    terminatePolicy: TerminateRunPolicy
  ): TerminateRunResult!
  terminateRun(
    runId: String!
    terminatePolicy: TerminateRunPolicy
  ): TerminateRunResult!
  deletePipelineRun(runId: String!): DeletePipelineRunResult!
  deleteRun(runId: String!): DeletePipelineRunResult!
  reloadRepositoryLocation(
    repositoryLocationName: String!
  ): ReloadRepositoryLocationMutationResult!
  reloadWorkspace: ReloadWorkspaceMutationResult!
  shutdownRepositoryLocation(
    repositoryLocationName: String!
  ): ShutdownRepositoryLocationMutationResult!
  wipeAssets(assetKeys: [AssetKeyInput!]!): AssetWipeMutationResult!
  launchPartitionBackfill(
    backfillParams: LaunchBackfillParams!
  ): LaunchBackfillResult!
  resumePartitionBackfill(backfillId: String!): ResumeBackfillResult!
  cancelPartitionBackfill(backfillId: String!): CancelBackfillResult!
  logTelemetry(
    action: String!
    clientId: String!
    clientTime: String!
    metadata: String!
  ): LogTelemetryMutationResult!
  setNuxSeen: Boolean!
  addDynamicPartition(
    partitionKey: String!
    partitionsDefName: String!
    repositorySelector: RepositorySelector!
  ): AddDynamicPartitionResult!
  setAutoMaterializePaused(paused: Boolean!): Boolean!
  setConcurrencyLimit(concurrencyKey: String!, limit: Int!): Boolean!
  freeConcurrencySlotsForRun(runId: String!): Boolean!
}

type DagitQuery {
  version: String!
  repositoriesOrError(
    repositorySelector: RepositorySelector
  ): RepositoriesOrError!
  repositoryOrError(repositorySelector: RepositorySelector!): RepositoryOrError!
  workspaceOrError: WorkspaceOrError!
  locationStatusesOrError: WorkspaceLocationStatusEntriesOrError!
  pipelineOrError(params: PipelineSelector!): PipelineOrError!
  pipelineSnapshotOrError(
    snapshotId: String
    activePipelineSelector: PipelineSelector
  ): PipelineSnapshotOrError!
  graphOrError(selector: GraphSelector): GraphOrError!
  scheduler: SchedulerOrError!
  scheduleOrError(scheduleSelector: ScheduleSelector!): ScheduleOrError!
  schedulesOrError(
    repositorySelector: RepositorySelector!
    scheduleStatus: InstigationStatus
  ): SchedulesOrError!
  topLevelResourceDetailsOrError(
    resourceSelector: ResourceSelector!
  ): ResourceDetailsOrError!
  allTopLevelResourceDetailsOrError(
    repositorySelector: RepositorySelector!
  ): ResourcesOrError!
  utilizedEnvVarsOrError(
    repositorySelector: RepositorySelector!
  ): EnvVarWithConsumersOrError!
  sensorOrError(sensorSelector: SensorSelector!): SensorOrError!
  sensorsOrError(
    repositorySelector: RepositorySelector!
    sensorStatus: InstigationStatus
  ): SensorsOrError!
  instigationStateOrError(
    instigationSelector: InstigationSelector!
  ): InstigationStateOrError!
  unloadableInstigationStatesOrError(
    instigationType: InstigationType
  ): InstigationStatesOrError!
  partitionSetsOrError(
    repositorySelector: RepositorySelector!
    pipelineName: String!
  ): PartitionSetsOrError!
  partitionSetOrError(
    repositorySelector: RepositorySelector!
    partitionSetName: String
  ): PartitionSetOrError!
  pipelineRunsOrError(
    filter: RunsFilter
    cursor: String
    limit: Int
  ): RunsOrError!
  pipelineRunOrError(runId: ID!): RunOrError!
  runsOrError(filter: RunsFilter, cursor: String, limit: Int): RunsOrError!
  runOrError(runId: ID!): RunOrError!
  runTagKeysOrError: RunTagKeysOrError
  runTagsOrError(
    tagKeys: [String!]
    valuePrefix: String
    limit: Int
  ): RunTagsOrError
  runGroupOrError(runId: ID!): RunGroupOrError!
  runGroupsOrError(
    filter: RunsFilter
    cursor: String
    limit: Int
  ): RunGroupsOrError!
  isPipelineConfigValid(
    pipeline: PipelineSelector!
    mode: String!
    runConfigData: RunConfigData
  ): PipelineConfigValidationResult!
  executionPlanOrError(
    pipeline: PipelineSelector!
    mode: String!
    runConfigData: RunConfigData
  ): ExecutionPlanOrError!
  runConfigSchemaOrError(
    selector: PipelineSelector!
    mode: String
  ): RunConfigSchemaOrError!
  instance: Instance!
  assetsOrError(prefix: [String!], cursor: String, limit: Int): AssetsOrError!
  assetOrError(assetKey: AssetKeyInput!): AssetOrError!
  assetNodes(
    group: AssetGroupSelector
    pipeline: PipelineSelector
    assetKeys: [AssetKeyInput!]
    loadMaterializations: Boolean = false
  ): [AssetNode!]!
  assetNodeOrError(assetKey: AssetKeyInput!): AssetNodeOrError!
  assetNodeDefinitionCollisions(
    assetKeys: [AssetKeyInput!]
  ): [AssetNodeDefinitionCollision!]!
  partitionBackfillOrError(backfillId: String!): PartitionBackfillOrError!
  partitionBackfillsOrError(
    status: BulkActionStatus
    cursor: String
    limit: Int
  ): PartitionBackfillsOrError!
  permissions: [Permission!]!
  assetsLatestInfo(assetKeys: [AssetKeyInput!]!): [AssetLatestInfo!]!
  logsForRun(
    runId: ID!
    afterCursor: String
    limit: Int
  ): EventConnectionOrError!
  capturedLogsMetadata(logKey: [String!]!): CapturedLogsMetadata!
  capturedLogs(logKey: [String!]!, cursor: String, limit: Int): CapturedLogs!
  shouldShowNux: Boolean!
  test: TestFields
  autoMaterializeAssetEvaluationsOrError(
    assetKey: AssetKeyInput!
    limit: Int!
    cursor: String
  ): AutoMaterializeAssetEvaluationRecordsOrError
}

type DagitSubscription {
  pipelineRunLogs(
    runId: ID!
    cursor: String
  ): PipelineRunLogsSubscriptionPayload!
  computeLogs(
    runId: ID!
    stepKey: String!
    ioType: ComputeIOType!
    cursor: String
  ): ComputeLogFile!

  capturedLogs(logKey: [String!]!, cursor: String): CapturedLogs!
  locationStateChangeEvents: LocationStateChangeSubscription!
}

enum DagsterEventType {
  STEP_OUTPUT
  STEP_INPUT
  STEP_FAILURE
  STEP_START
  STEP_SUCCESS
  STEP_SKIPPED
  STEP_WORKER_STARTING
  STEP_WORKER_STARTED
  RESOURCE_INIT_STARTED
  RESOURCE_INIT_SUCCESS
  RESOURCE_INIT_FAILURE
  STEP_UP_FOR_RETRY
  STEP_RESTARTED
  ASSET_MATERIALIZATION
  ASSET_MATERIALIZATION_PLANNED
  ASSET_OBSERVATION
  STEP_EXPECTATION_RESULT
  RUN_ENQUEUED
  RUN_DEQUEUED
  RUN_STARTING
  RUN_START
  RUN_SUCCESS
  RUN_FAILURE
  RUN_CANCELING
  RUN_CANCELED
  PIPELINE_ENQUEUED
  PIPELINE_DEQUEUED
  PIPELINE_STARTING
  PIPELINE_START
  PIPELINE_SUCCESS
  PIPELINE_FAILURE
  PIPELINE_CANCELING
  PIPELINE_CANCELED
  OBJECT_STORE_OPERATION
  ASSET_STORE_OPERATION
  LOADED_INPUT
  HANDLED_OUTPUT
  ENGINE_EVENT
  HOOK_COMPLETED
  HOOK_ERRORED
  HOOK_SKIPPED
  ALERT_START
  ALERT_SUCCESS
  ALERT_FAILURE
  LOGS_CAPTURED
}

type DagsterLibraryVersion {
  name: String!
  version: String!
}

union DagsterRunEvent =
    ExecutionStepFailureEvent
  | ExecutionStepInputEvent
  | ExecutionStepOutputEvent
  | ExecutionStepSkippedEvent
  | ExecutionStepStartEvent
  | ExecutionStepSuccessEvent
  | ExecutionStepUpForRetryEvent
  | ExecutionStepRestartEvent
  | LogMessageEvent
  | ResourceInitFailureEvent
  | ResourceInitStartedEvent
  | ResourceInitSuccessEvent
  | RunFailureEvent
  | RunStartEvent
  | RunEnqueuedEvent
  | RunDequeuedEvent
  | RunStartingEvent
  | RunCancelingEvent
  | RunCanceledEvent
  | RunSuccessEvent
  | StepWorkerStartedEvent
  | StepWorkerStartingEvent
  | HandledOutputEvent
  | LoadedInputEvent
  | LogsCapturedEvent
  | ObjectStoreOperationEvent
  | StepExpectationResultEvent
  | MaterializationEvent
  | ObservationEvent
  | EngineEvent
  | HookCompletedEvent
  | HookSkippedEvent
  | HookErroredEvent
  | AlertStartEvent
  | AlertSuccessEvent
  | AlertFailureEvent
  | AssetMaterializationPlannedEvent
interface DagsterType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [DagsterType!]!
  metadataEntries: [MetadataEntry!]!
}

type DagsterTypeNotFoundError implements Error {
  message: String!
  dagsterTypeName: String!
}

union DagsterTypeOrError = RegularDagsterType | PipelineNotFoundError | DagsterTypeNotFoundError | PythonError
type DefaultPartitionStatuses {
  materializedPartitions: [String!]!
  failedPartitions: [String!]!
  unmaterializedPartitions: [String!]!
  materializingPartitions: [String!]!
}

union DeletePipelineRunResult = DeletePipelineRunSuccess | UnauthorizedError | PythonError | RunNotFoundError
type DeletePipelineRunSuccess {
  runId: String!
}

type DeleteRunMutation {
  Output: DeletePipelineRunResult!
}

type DimensionDefinitionType {
  name: String!
  description: String!
  type: PartitionDefinitionType!
  isPrimaryDimension: Boolean!
  dynamicPartitionsDefinitionName: String
}

type DimensionPartitionKeys {
  name: String!
  partitionKeys: [String!]!
  type: PartitionDefinitionType!
}

interface DisplayableEvent {
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
}

type DownstreamFreshnessAutoMaterializeCondition implements AutoMaterializeConditionWithDecisionType {
  decisionType: AutoMaterializeDecisionType!
  partitionKeysOrError: PartitionKeysOrError
}

type DryRunInstigationTick {
  timestamp: Float
  evaluationResult: TickEvaluation
}

type DryRunInstigationTicks {
  results: [DryRunInstigationTick!]!
  cursor: Float!
}

type DuplicateDynamicPartitionError implements Error {
  message: String!
  partitionsDefName: String!
  partitionName: String!
}

type DynamicPartitionRequest {
  partitionKeys: [String!]
  partitionsDefName: String!
  type: DynamicPartitionsRequestType!
}

type DynamicPartitionsRequestResult {
  partitionKeys: [String!]
  partitionsDefName: String!
  type: DynamicPartitionsRequestType!
  skippedPartitionKeys: [String!]!
}

enum DynamicPartitionsRequestType {
  ADD_PARTITIONS
  DELETE_PARTITIONS
}

type EngineEvent implements MessageEvent & DisplayableEvent & StepEvent & MarkerEvent & ErrorEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  markerStart: String
  markerEnd: String
  error: PythonError
}

type EnumConfigType implements ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  values: [EnumConfigValue!]!
  givenName: String!
}

type EnumConfigValue {
  value: String!
  description: String
}

type EnvVarConsumer {
  type: EnvVarConsumerType!
  name: String!
}

enum EnvVarConsumerType {
  RESOURCE
}

type EnvVarWithConsumers {
  envVarName: String!
  envVarConsumers: [EnvVarConsumer!]!
}

type EnvVarWithConsumersList {
  results: [EnvVarWithConsumers!]!
}

union EnvVarWithConsumersOrError = EnvVarWithConsumersList | PythonError
interface Error {
  message: String!
}

type ErrorChainLink implements Error {
  message: String!
  error: PythonError!
  isExplicitLink: Boolean!
}

interface ErrorEvent {
  error: PythonError
}

enum ErrorSource {
  FRAMEWORK_ERROR
  USER_CODE_ERROR
  UNEXPECTED_ERROR
  INTERRUPT
}

enum EvaluationErrorReason {
  RUNTIME_TYPE_MISMATCH
  MISSING_REQUIRED_FIELD
  MISSING_REQUIRED_FIELDS
  FIELD_NOT_DEFINED
  FIELDS_NOT_DEFINED
  SELECTOR_FIELD_ERROR
}

type EvaluationStack {
  entries: [EvaluationStackEntry!]!
}

union EvaluationStackEntry =
    EvaluationStackListItemEntry
  | EvaluationStackPathEntry
  | EvaluationStackMapKeyEntry
  | EvaluationStackMapValueEntry
type EvaluationStackListItemEntry {
  listIndex: Int!
}

type EvaluationStackMapKeyEntry {
  mapKey: GenericScalar!
}

type EvaluationStackMapValueEntry {
  mapKey: GenericScalar!
}

type EvaluationStackPathEntry {
  fieldName: String!
}

type EventConnection {
  events: [DagsterRunEvent!]!
  cursor: String!
  hasMore: Boolean!
}

union EventConnectionOrError = EventConnection | RunNotFoundError | PythonError
type EventTag {
  key: String!
  value: String!
}

input ExecutionMetadata {
  runId: String
  tags: [ExecutionTag!]
  rootRunId: String
  parentRunId: String
}

input ExecutionParams {
  selector: JobOrPipelineSelector!
  runConfigData: RunConfigData
  mode: String
  executionMetadata: ExecutionMetadata
  stepKeys: [String!]
  preset: String
}

type ExecutionPlan {
  steps: [ExecutionStep!]!
  artifactsPersisted: Boolean!
}

union ExecutionPlanOrError =
    ExecutionPlan
  | RunConfigValidationInvalid
  | PipelineNotFoundError
  | InvalidSubsetError
  | PythonError
type ExecutionStep {
  key: String!
  inputs: [ExecutionStepInput!]!
  outputs: [ExecutionStepOutput!]!
  solidHandleID: String!
  kind: StepKind!
  metadata: [MetadataItemDefinition!]!
}

type ExecutionStepFailureEvent implements MessageEvent & StepEvent & ErrorEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  error: PythonError
  errorSource: ErrorSource
  failureMetadata: FailureMetadata
}

type ExecutionStepInput {
  name: String!
  dependsOn: [ExecutionStep!]!
}

type ExecutionStepInputEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  inputName: String!
  typeCheck: TypeCheck!
}

type ExecutionStepOutput {
  name: String!
}

type ExecutionStepOutputEvent implements MessageEvent & StepEvent & DisplayableEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  outputName: String!
  typeCheck: TypeCheck!
}

type ExecutionStepRestartEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
}

type ExecutionStepSkippedEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
}

type ExecutionStepStartEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
}

type ExecutionStepSuccessEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
}

type ExecutionStepUpForRetryEvent implements MessageEvent & StepEvent & ErrorEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  error: PythonError
  secondsToWait: Int
}

input ExecutionTag {
  key: String!
  value: String!
}

type ExpectationResult implements DisplayableEvent {
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  success: Boolean!
}

type FailureMetadata implements DisplayableEvent {
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
}

type FieldNotDefinedConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  fieldName: String!
}

type FieldsNotDefinedConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  fieldNames: [String!]!
}

type FloatMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  floatValue: Float
}

type FreshnessAutoMaterializeCondition implements AutoMaterializeConditionWithDecisionType {
  decisionType: AutoMaterializeDecisionType!
  partitionKeysOrError: PartitionKeysOrError
}

type FreshnessPolicy {
  maximumLagMinutes: Float!
  cronSchedule: String
  cronScheduleTimezone: String
}

scalar GenericScalar

type Graph implements SolidContainer {
  id: ID!
  name: String!
  description: String
  solids: [Solid!]!
  solidHandle(handleID: String!): SolidHandle
  solidHandles(parentHandleID: String): [SolidHandle!]!
  modes: [Mode!]!
}

type GraphNotFoundError implements Error {
  message: String!
  graphName: String!
  repositoryName: String!
  repositoryLocationName: String!
}

union GraphOrError = Graph | GraphNotFoundError | PythonError

input GraphSelector {
  graphName: String!
  repositoryName: String!
  repositoryLocationName: String!
}

type HandledOutputEvent implements MessageEvent & StepEvent & DisplayableEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  outputName: String!
  managerKey: String!
}

type HookCompletedEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
}

type HookErroredEvent implements MessageEvent & StepEvent & ErrorEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  error: PythonError
}

type HookSkippedEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
}

type Input {
  solid: Solid!
  definition: InputDefinition!
  dependsOn: [Output!]!
  isDynamicCollect: Boolean!
}

type InputDefinition {
  solidDefinition: SolidDefinition!
  name: String!
  description: String
  type: DagsterType!
  metadataEntries: [MetadataEntry!]!
}

type InputMapping {
  mappedInput: Input!
  definition: InputDefinition!
}

input InputTag {
  name: String!
  value: String!
}

type Instance {
  id: String!
  info: String
  runLauncher: RunLauncher
  runQueuingSupported: Boolean!
  executablePath: String!
  daemonHealth: DaemonHealth!
  hasInfo: Boolean!
  hasCapturedLogManager: Boolean!
  autoMaterializePaused: Boolean!
  concurrencyLimits: [ConcurrencyKeyInfo!]!
}

type InstigationEvent {
  message: String!
  timestamp: String!
  level: LogLevel!
}

type InstigationEventConnection {
  events: [InstigationEvent!]!
  cursor: String!
  hasMore: Boolean!
}

input InstigationSelector {
  repositoryName: String!
  repositoryLocationName: String!
  name: String!
}

type InstigationState {
  id: ID!
  selectorId: String!
  name: String!
  instigationType: InstigationType!
  status: InstigationStatus!
  repositoryName: String!
  repositoryLocationName: String!
  repositoryOrigin: RepositoryOrigin!
  typeSpecificData: InstigationTypeSpecificData
  runs(limit: Int): [Run!]!
  runsCount: Int!
  tick(timestamp: Float): InstigationTick
  ticks(
    dayRange: Int
    dayOffset: Int
    limit: Int
    cursor: String
    statuses: [InstigationTickStatus!]
  ): [InstigationTick!]!
  nextTick: DryRunInstigationTick
  runningCount: Int!
  hasStartPermission: Boolean!
  hasStopPermission: Boolean!
}

type InstigationStateNotFoundError implements Error {
  message: String!
  name: String!
}

union InstigationStateOrError = InstigationState | InstigationStateNotFoundError | PythonError
type InstigationStates {
  results: [InstigationState!]!
}

union InstigationStatesOrError = InstigationStates | PythonError
enum InstigationStatus {
  RUNNING
  STOPPED
}

type InstigationTick {
  id: ID!
  status: InstigationTickStatus!
  timestamp: Float!
  runIds: [String!]!
  runKeys: [String!]!
  error: PythonError
  skipReason: String
  cursor: String
  runs: [Run!]!
  originRunIds: [String!]!
  logKey: [String!]
  logEvents: InstigationEventConnection!
  dynamicPartitionsRequestResults: [DynamicPartitionsRequestResult!]!
}

enum InstigationTickStatus {
  STARTED
  SKIPPED
  SUCCESS
  FAILURE
}

enum InstigationType {
  SCHEDULE
  SENSOR
}

union InstigationTypeSpecificData = SensorData | ScheduleData
type IntMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  intValue: Int
  intRepr: String!
}

type InvalidOutputError {
  stepKey: String!
  invalidOutputName: String!
}

type InvalidPipelineRunsFilterError implements Error {
  message: String!
}

type InvalidStepError {
  invalidStepKey: String!
}

type InvalidSubsetError implements Error {
  message: String!
  pipeline: Pipeline!
}

interface IPipelineSnapshot {
  name: String!
  description: String
  pipelineSnapshotId: String!
  dagsterTypes: [DagsterType!]!
  dagsterTypeOrError(dagsterTypeName: String!): DagsterTypeOrError!
  solids: [Solid!]!
  modes: [Mode!]!
  solidHandles(parentHandleID: String): [SolidHandle!]!
  solidHandle(handleID: String!): SolidHandle
  tags: [PipelineTag!]!
  metadataEntries: [MetadataEntry!]!
  runs(cursor: String, limit: Int): [Run!]!
  schedules: [Schedule!]!
  sensors: [Sensor!]!
  parentSnapshotId: String
  graphName: String!
}

interface ISolidDefinition {
  name: String!
  description: String
  metadata: [MetadataItemDefinition!]!
  inputDefinitions: [InputDefinition!]!
  outputDefinitions: [OutputDefinition!]!
  assetNodes: [AssetNode!]!
}

type Job implements SolidContainer & IPipelineSnapshot {
  id: ID!
  name: String!
  description: String
  solids: [Solid!]!
  solidHandle(handleID: String!): SolidHandle
  solidHandles(parentHandleID: String): [SolidHandle!]!
  modes: [Mode!]!
  pipelineSnapshotId: String!
  dagsterTypes: [DagsterType!]!
  dagsterTypeOrError(dagsterTypeName: String!): DagsterTypeOrError!
  tags: [PipelineTag!]!
  metadataEntries: [MetadataEntry!]!
  runs(cursor: String, limit: Int): [Run!]!
  schedules: [Schedule!]!
  sensors: [Sensor!]!
  parentSnapshotId: String
  graphName: String!
  presets: [PipelinePreset!]!
  isJob: Boolean!
  isAssetJob: Boolean!
  repository: Repository!
}

input JobOrPipelineSelector {
  pipelineName: String
  jobName: String
  repositoryName: String!
  repositoryLocationName: String!
  solidSelection: [String!]
  assetSelection: [AssetKeyInput!]
}

type JobWithOps {
  job: Job!
  opsUsing: [SolidHandle!]!
}

type JsonMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  jsonString: String!
}

type LaunchBackfillMutation {
  Output: LaunchBackfillResult!
}

input LaunchBackfillParams {
  selector: PartitionSetSelector
  partitionNames: [String!]
  reexecutionSteps: [String!]
  assetSelection: [AssetKeyInput!]
  fromFailure: Boolean
  allPartitions: Boolean
  tags: [ExecutionTag!]
  forceSynchronousSubmission: Boolean
}

union LaunchBackfillResult =
    LaunchBackfillSuccess
  | PartitionSetNotFoundError
  | InvalidStepError
  | InvalidOutputError
  | RunConfigValidationInvalid
  | PipelineNotFoundError
  | RunConflict
  | UnauthorizedError
  | PythonError
  | InvalidSubsetError
  | PresetNotFoundError
  | ConflictingExecutionParamsError
  | NoModeProvidedError
type LaunchBackfillSuccess {
  backfillId: String!
  launchedRunIds: [String]
}

interface LaunchPipelineRunSuccess {
  run: Run!
}

type LaunchRunMutation {
  Output: LaunchRunResult!
}

type LaunchRunReexecutionMutation {
  Output: LaunchRunReexecutionResult!
}

union LaunchRunReexecutionResult =
    LaunchRunSuccess
  | InvalidStepError
  | InvalidOutputError
  | RunConfigValidationInvalid
  | PipelineNotFoundError
  | RunConflict
  | UnauthorizedError
  | PythonError
  | InvalidSubsetError
  | PresetNotFoundError
  | ConflictingExecutionParamsError
  | NoModeProvidedError
union LaunchRunResult =
    LaunchRunSuccess
  | InvalidStepError
  | InvalidOutputError
  | RunConfigValidationInvalid
  | PipelineNotFoundError
  | RunConflict
  | UnauthorizedError
  | PythonError
  | InvalidSubsetError
  | PresetNotFoundError
  | ConflictingExecutionParamsError
  | NoModeProvidedError
type LaunchRunSuccess implements LaunchPipelineRunSuccess {
  run: Run!
}

type ListDagsterType implements DagsterType & WrappingDagsterType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [DagsterType!]!
  metadataEntries: [MetadataEntry!]!
  ofType: DagsterType!
}

type LoadedInputEvent implements MessageEvent & StepEvent & DisplayableEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  inputName: String!
  managerKey: String!
  upstreamOutputName: String
  upstreamStepKey: String
}

type LocationStateChangeEvent {
  eventType: LocationStateChangeEventType!
  message: String!
  locationName: String!
  serverId: String
}

enum LocationStateChangeEventType {
  LOCATION_UPDATED
  LOCATION_DISCONNECTED
  LOCATION_RECONNECTED
  LOCATION_ERROR
}

type LocationStateChangeSubscription {
  event: LocationStateChangeEvent!
}

type Logger {
  name: String!
  description: String
  configField: ConfigTypeField
}

enum LogLevel {
  CRITICAL
  ERROR
  INFO
  WARNING
  DEBUG
}

type LogMessageEvent implements MessageEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
}

type LogsCapturedEvent implements MessageEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  fileKey: String!
  stepKeys: [String!]
  externalUrl: String
  externalStdoutUrl: String
  externalStderrUrl: String
  pid: Int
  logKey: String!
}

union LogTelemetryMutationResult = LogTelemetrySuccess | PythonError
type LogTelemetrySuccess {
  action: String!
}

type MapConfigType implements ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  keyType: ConfigType!
  valueType: ConfigType!
  keyLabelName: String
}

type MarkdownMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  mdStr: String!
}

interface MarkerEvent {
  markerStart: String
  markerEnd: String
}

input MarshalledInput {
  inputName: String!
  key: String!
}

input MarshalledOutput {
  outputName: String!
  key: String!
}

type MaterializationEvent implements MessageEvent & StepEvent & DisplayableEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  assetKey: AssetKey
  runOrError: RunOrError!
  stepStats: RunStepStats!
  partition: String
  tags: [EventTag!]!
  assetLineage: [AssetLineageInfo!]!
}

type MaterializationUpstreamDataVersion {
  assetKey: AssetKey!
  downstreamAssetKey: AssetKey!
  timestamp: String!
}

type MaterializedPartitionRangeStatuses2D {
  primaryDimStartKey: String!
  primaryDimEndKey: String!
  primaryDimStartTime: Float
  primaryDimEndTime: Float
  secondaryDim: PartitionStatus1D!
}

type MaxMaterializationsExceededAutoMaterializeCondition implements AutoMaterializeConditionWithDecisionType {
  decisionType: AutoMaterializeDecisionType!
  partitionKeysOrError: PartitionKeysOrError
}

interface MessageEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
}

interface MetadataEntry {
  label: String!
  description: String
}

type MetadataItemDefinition {
  key: String!
  value: String!
}

type MissingAutoMaterializeCondition implements AutoMaterializeConditionWithDecisionType {
  decisionType: AutoMaterializeDecisionType!
  partitionKeysOrError: PartitionKeysOrError
}

type MissingFieldConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  field: ConfigTypeField!
}

type MissingFieldsConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  fields: [ConfigTypeField!]!
}

type MissingRunIdErrorEvent {
  invalidRunId: String!
}

type Mode {
  id: String!
  name: String!
  description: String
  resources: [Resource!]!
  loggers: [Logger!]!
}

type ModeNotFoundError implements Error {
  message: String!
  mode: String!
}

type MultiPartitionStatuses {
  ranges: [MaterializedPartitionRangeStatuses2D!]!
  primaryDimensionName: String!
}

type NestedResourceEntry {
  name: String!
  type: NestedResourceType!
  resource: ResourceDetails
}

enum NestedResourceType {
  ANONYMOUS
  TOP_LEVEL
}

type NodeInvocationSite {
  pipeline: Pipeline!
  solidHandle: SolidHandle!
}

type NoModeProvidedError implements Error {
  message: String!
  pipelineName: String!
}

type NotebookMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  path: String!
}

type NullableConfigType implements ConfigType & WrappingConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  ofType: ConfigType!
}

type NullableDagsterType implements DagsterType & WrappingDagsterType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [DagsterType!]!
  metadataEntries: [MetadataEntry!]!
  ofType: DagsterType!
}

type NullMetadataEntry implements MetadataEntry {
  label: String!
  description: String
}

type ObjectStoreOperationEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  operationResult: ObjectStoreOperationResult!
}

type ObjectStoreOperationResult implements DisplayableEvent {
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  op: ObjectStoreOperationType!
}

enum ObjectStoreOperationType {
  SET_OBJECT
  GET_OBJECT
  RM_OBJECT
  CP_OBJECT
}

type ObservationEvent implements MessageEvent & StepEvent & DisplayableEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  assetKey: AssetKey
  runOrError: RunOrError!
  stepStats: RunStepStats!
  partition: String
  tags: [EventTag!]!
}

type Output {
  solid: Solid!
  definition: OutputDefinition!
  dependedBy: [Input!]!
}

type OutputDefinition {
  solidDefinition: SolidDefinition!
  name: String!
  description: String
  isDynamic: Boolean
  type: DagsterType!
  metadataEntries: [MetadataEntry!]!
}

type OutputMapping {
  mappedOutput: Output!
  definition: OutputDefinition!
}

type ParentMaterializedAutoMaterializeCondition implements AutoMaterializeConditionWithDecisionType {
  decisionType: AutoMaterializeDecisionType!
  partitionKeysOrError: PartitionKeysOrError
}

type ParentOutdatedAutoMaterializeCondition implements AutoMaterializeConditionWithDecisionType {
  decisionType: AutoMaterializeDecisionType!
  partitionKeysOrError: PartitionKeysOrError
}

type Partition {
  name: String!
  partitionSetName: String!
  solidSelection: [String!]
  mode: String!
  runConfigOrError: PartitionRunConfigOrError!
  tagsOrError: PartitionTagsOrError!
  runs(filter: RunsFilter, cursor: String, limit: Int): [Run!]!
  status: RunStatus
}

type PartitionBackfill {
  id: String!
  status: BulkActionStatus!
  partitionNames: [String!]
  isValidSerialization: Boolean!
  numPartitions: Int
  numCancelable: Int!
  fromFailure: Boolean!
  reexecutionSteps: [String!]
  assetSelection: [AssetKey!]
  partitionSetName: String
  timestamp: Float!
  endTimestamp: Float
  partitionSet: PartitionSet
  runs(limit: Int): [Run!]!
  unfinishedRuns(limit: Int): [Run!]!
  error: PythonError
  partitionStatuses: PartitionStatuses
  partitionStatusCounts: [PartitionStatusCounts!]!
  isAssetBackfill: Boolean!
  assetBackfillData: AssetBackfillData
  hasCancelPermission: Boolean!
  hasResumePermission: Boolean!
  user: String
}

union PartitionBackfillOrError = PartitionBackfill | BackfillNotFoundError | PythonError
type PartitionBackfills {
  results: [PartitionBackfill!]!
}

union PartitionBackfillsOrError = PartitionBackfills | PythonError
type PartitionDefinition {
  description: String!
  type: PartitionDefinitionType!
  dimensionTypes: [DimensionDefinitionType!]!
  name: String
}

enum PartitionDefinitionType {
  TIME_WINDOW
  STATIC
  MULTIPARTITIONED
  DYNAMIC
}

type PartitionKeyRange {
  start: String!
  end: String!
}

type PartitionKeys {
  partitionKeys: [String!]!
}

union PartitionKeysOrError = PartitionKeys | PartitionSubsetDeserializationError
enum PartitionRangeStatus {
  MATERIALIZING
  MATERIALIZED
  FAILED
}

type PartitionRun {
  id: String!
  partitionName: String!
  run: Run
}

type PartitionRunConfig {
  yaml: String!
}

union PartitionRunConfigOrError = PartitionRunConfig | PythonError
type Partitions {
  results: [Partition!]!
}

type PartitionSet {
  id: ID!
  name: String!
  pipelineName: String!
  solidSelection: [String!]
  mode: String!
  partitionsOrError(
    cursor: String
    limit: Int
    reverse: Boolean
  ): PartitionsOrError!
  partition(partitionName: String!): Partition
  partitionStatusesOrError: PartitionStatusesOrError!
  partitionRuns: [PartitionRun!]!
  repositoryOrigin: RepositoryOrigin!
  backfills(cursor: String, limit: Int): [PartitionBackfill!]!
}

type PartitionSetNotFoundError implements Error {
  message: String!
  partitionSetName: String!
}

union PartitionSetOrError = PartitionSet | PartitionSetNotFoundError | PythonError
type PartitionSets {
  results: [PartitionSet!]!
}

input PartitionSetSelector {
  partitionSetName: String!
  repositorySelector: RepositorySelector!
}

union PartitionSetsOrError = PartitionSets | PipelineNotFoundError | PythonError
union PartitionsOrError = Partitions | PythonError
type PartitionStats {
  numMaterialized: Int!
  numPartitions: Int!
  numFailed: Int!
  numMaterializing: Int!
}

type PartitionStatus {
  id: String!
  partitionName: String!
  runId: String
  runStatus: RunStatus
  runDuration: Float
}

union PartitionStatus1D = TimePartitionStatuses | DefaultPartitionStatuses
type PartitionStatusCounts {
  runStatus: RunStatus!
  count: Int!
}

type PartitionStatuses {
  results: [PartitionStatus!]!
}

union PartitionStatusesOrError = PartitionStatuses | PythonError
type PartitionSubsetDeserializationError implements Error {
  message: String!
}

type PartitionTags {
  results: [PipelineTag!]!
}

union PartitionTagsOrError = PartitionTags | PythonError
type PathMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  path: String!
}

type Permission {
  permission: String!
  value: Boolean!
  disabledReason: String
}

type Pipeline implements SolidContainer & IPipelineSnapshot {
  id: ID!
  name: String!
  description: String
  solids: [Solid!]!
  solidHandle(handleID: String!): SolidHandle
  solidHandles(parentHandleID: String): [SolidHandle!]!
  modes: [Mode!]!
  pipelineSnapshotId: String!
  dagsterTypes: [DagsterType!]!
  dagsterTypeOrError(dagsterTypeName: String!): DagsterTypeOrError!
  tags: [PipelineTag!]!
  metadataEntries: [MetadataEntry!]!
  runs(cursor: String, limit: Int): [Run!]!
  schedules: [Schedule!]!
  sensors: [Sensor!]!
  parentSnapshotId: String
  graphName: String!
  presets: [PipelinePreset!]!
  isJob: Boolean!
  isAssetJob: Boolean!
  repository: Repository!
}

interface PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
}

interface PipelineConfigValidationInvalid {
  pipelineName: String!
  errors: [PipelineConfigValidationError!]!
}

union PipelineConfigValidationResult =
    InvalidSubsetError
  | PipelineConfigValidationValid
  | RunConfigValidationInvalid
  | PipelineNotFoundError
  | PythonError
type PipelineConfigValidationValid {
  pipelineName: String!
}

type PipelineNotFoundError implements Error {
  message: String!
  pipelineName: String!
  repositoryName: String!
  repositoryLocationName: String!
}

union PipelineOrError = Pipeline | PipelineNotFoundError | InvalidSubsetError | PythonError
type PipelinePreset {
  name: String!
  solidSelection: [String!]
  runConfigYaml: String!
  mode: String!
  tags: [PipelineTag!]!
}

interface PipelineReference {
  name: String!
  solidSelection: [String!]
}

interface PipelineRun {
  id: ID!
  runId: String!
  pipelineSnapshotId: String
  repositoryOrigin: RepositoryOrigin
  status: RunStatus!
  pipeline: PipelineReference!
  pipelineName: String!
  jobName: String!
  solidSelection: [String!]
  stats: RunStatsSnapshotOrError!
  stepStats: [RunStepStats!]!
  computeLogs(stepKey: String!): ComputeLogs!
  capturedLogs(fileKey: String!): CapturedLogs!
  executionPlan: ExecutionPlan
  stepKeysToExecute: [String!]
  runConfigYaml: String!
  runConfig: RunConfigData!
  mode: String!
  tags: [PipelineTag!]!
  rootRunId: String
  parentRunId: String
  canTerminate: Boolean!
  assets: [Asset!]!
  eventConnection(afterCursor: String): EventConnection!
}

interface PipelineRunConflict {
  message: String!
}

type PipelineRunLogsSubscriptionFailure {
  message: String!
  missingRunId: String
}

union PipelineRunLogsSubscriptionPayload = PipelineRunLogsSubscriptionSuccess | PipelineRunLogsSubscriptionFailure
type PipelineRunLogsSubscriptionSuccess {
  run: Run!
  messages: [DagsterRunEvent!]!
  hasMorePastEvents: Boolean!
  cursor: String!
}

type PipelineRunMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  runId: String!
}

interface PipelineRunNotFoundError {
  runId: String!
  message: String!
}

interface PipelineRuns {
  results: [Run!]!
  count: Int
}

interface PipelineRunStatsSnapshot {
  id: String!
  runId: String!
  stepsSucceeded: Int!
  stepsFailed: Int!
  materializations: Int!
  expectations: Int!
  enqueuedTime: Float
  launchTime: Float
  startTime: Float
  endTime: Float
}

interface PipelineRunStepStats {
  runId: String!
  stepKey: String!
  status: StepEventStatus
  startTime: Float
  endTime: Float
  materializations: [MaterializationEvent!]!
  expectationResults: [ExpectationResult!]!
}

input PipelineSelector {
  pipelineName: String!
  repositoryName: String!
  repositoryLocationName: String!
  solidSelection: [String!]
  assetSelection: [AssetKeyInput!]
}

type PipelineSnapshot implements SolidContainer & IPipelineSnapshot & PipelineReference {
  id: ID!
  name: String!
  description: String
  solids: [Solid!]!
  solidHandle(handleID: String!): SolidHandle
  solidHandles(parentHandleID: String): [SolidHandle!]!
  modes: [Mode!]!
  pipelineSnapshotId: String!
  dagsterTypes: [DagsterType!]!
  dagsterTypeOrError(dagsterTypeName: String!): DagsterTypeOrError!
  tags: [PipelineTag!]!
  metadataEntries: [MetadataEntry!]!
  runs(cursor: String, limit: Int): [Run!]!
  schedules: [Schedule!]!
  sensors: [Sensor!]!
  parentSnapshotId: String
  graphName: String!
  solidSelection: [String!]
}

type PipelineSnapshotNotFoundError implements Error {
  message: String!
  snapshotId: String!
}

union PipelineSnapshotOrError =
    PipelineNotFoundError
  | PipelineSnapshot
  | PipelineSnapshotNotFoundError
  | PythonError
type PipelineTag {
  key: String!
  value: String!
}

type PipelineTagAndValues {
  key: String!
  values: [String!]!
}

type PresetNotFoundError implements Error {
  message: String!
  preset: String!
}

type PythonArtifactMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  module: String!
  name: String!
}

type PythonError implements Error {
  message: String!
  className: String
  stack: [String!]!
  cause: PythonError
  causes: [PythonError!]!
  errorChain: [ErrorChainLink!]!
}

input ReexecutionParams {
  parentRunId: String!
  strategy: ReexecutionStrategy!
}

enum ReexecutionStrategy {
  FROM_FAILURE
  ALL_STEPS
}

type RegularConfigType implements ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  givenName: String!
}

type RegularDagsterType implements DagsterType {
  key: String!
  name: String
  displayName: String!
  description: String
  isNullable: Boolean!
  isList: Boolean!
  isBuiltin: Boolean!
  isNothing: Boolean!
  inputSchemaType: ConfigType
  outputSchemaType: ConfigType
  innerTypes: [DagsterType!]!
  metadataEntries: [MetadataEntry!]!
}

type ReloadNotSupported implements Error {
  message: String!
}

type ReloadRepositoryLocationMutation {
  Output: ReloadRepositoryLocationMutationResult!
}

union ReloadRepositoryLocationMutationResult =
    WorkspaceLocationEntry
  | ReloadNotSupported
  | RepositoryLocationNotFound
  | UnauthorizedError
  | PythonError
type ReloadWorkspaceMutation {
  Output: ReloadWorkspaceMutationResult!
}

union ReloadWorkspaceMutationResult = Workspace | UnauthorizedError | PythonError
union RepositoriesOrError = RepositoryConnection | PythonError
type Repository {
  id: ID!
  name: String!
  location: RepositoryLocation!
  pipelines: [Pipeline!]!
  jobs: [Job!]!
  usedSolids: [UsedSolid!]!
  usedSolid(name: String!): UsedSolid
  origin: RepositoryOrigin!
  partitionSets: [PartitionSet!]!
  schedules: [Schedule!]!
  sensors: [Sensor!]!
  assetNodes: [AssetNode!]!
  displayMetadata: [RepositoryMetadata!]!
  assetGroups: [AssetGroup!]!
  allTopLevelResourceDetails: [ResourceDetails!]!
}

type RepositoryConnection {
  nodes: [Repository!]!
}

type RepositoryLocation {
  id: ID!
  name: String!
  isReloadSupported: Boolean!
  environmentPath: String
  repositories: [Repository!]!
  serverId: String
  dagsterLibraryVersions: [DagsterLibraryVersion!]
}

enum RepositoryLocationLoadStatus {
  LOADING
  LOADED
}

type RepositoryLocationNotFound implements Error {
  message: String!
}

union RepositoryLocationOrLoadError = RepositoryLocation | PythonError
type RepositoryMetadata {
  key: String!
  value: String!
}

type RepositoryNotFoundError implements Error {
  message: String!
  repositoryName: String!
  repositoryLocationName: String!
}

union RepositoryOrError = PythonError | Repository | RepositoryNotFoundError
type RepositoryOrigin {
  id: String!
  repositoryLocationName: String!
  repositoryName: String!
  repositoryLocationMetadata: [RepositoryMetadata!]!
}

input RepositorySelector {
  repositoryName: String!
  repositoryLocationName: String!
}

type Resource {
  name: String!
  description: String
  configField: ConfigTypeField
}

type ResourceDetails {
  name: String!
  description: String
  configFields: [ConfigTypeField!]!
  configuredValues: [ConfiguredValue!]!
  isTopLevel: Boolean!
  nestedResources: [NestedResourceEntry!]!
  parentResources: [NestedResourceEntry!]!
  resourceType: String!
  assetKeysUsing: [AssetKey!]!
  jobsOpsUsing: [JobWithOps!]!
}

type ResourceDetailsList {
  results: [ResourceDetails!]!
}

union ResourceDetailsOrError = ResourceDetails | ResourceNotFoundError | PythonError
type ResourceInitFailureEvent implements MessageEvent & DisplayableEvent & StepEvent & MarkerEvent & ErrorEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  markerStart: String
  markerEnd: String
  error: PythonError
}

type ResourceInitStartedEvent implements MessageEvent & DisplayableEvent & StepEvent & MarkerEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  markerStart: String
  markerEnd: String
}

type ResourceInitSuccessEvent implements MessageEvent & DisplayableEvent & StepEvent & MarkerEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  markerStart: String
  markerEnd: String
}

type ResourceNotFoundError implements Error {
  message: String!
  resourceName: String!
}

type ResourceRequirement {
  resourceKey: String!
}

input ResourceSelector {
  repositoryName: String!
  repositoryLocationName: String!
  resourceName: String!
}

union ResourcesOrError = ResourceDetailsList | RepositoryNotFoundError | PythonError
union ResumeBackfillResult = ResumeBackfillSuccess | UnauthorizedError | PythonError
type ResumeBackfillSuccess {
  backfillId: String!
}

type Run implements PipelineRun {
  id: ID!
  runId: String!
  pipelineSnapshotId: String
  repositoryOrigin: RepositoryOrigin
  status: RunStatus!
  pipeline: PipelineReference!
  pipelineName: String!
  jobName: String!
  solidSelection: [String!]
  stats: RunStatsSnapshotOrError!
  stepStats: [RunStepStats!]!
  computeLogs(stepKey: String!): ComputeLogs!
  capturedLogs(fileKey: String!): CapturedLogs!
  executionPlan: ExecutionPlan
  stepKeysToExecute: [String!]
  runConfigYaml: String!
  runConfig: RunConfigData!
  mode: String!
  tags: [PipelineTag!]!
  rootRunId: String
  parentRunId: String
  canTerminate: Boolean!
  assets: [Asset!]!
  eventConnection(afterCursor: String): EventConnection!
  parentPipelineSnapshotId: String
  assetSelection: [AssetKey!]
  resolvedOpSelection: [String!]
  assetMaterializations: [MaterializationEvent!]!
  startTime: Float
  endTime: Float
  updateTime: Float
  hasReExecutePermission: Boolean!
  hasTerminatePermission: Boolean!
  hasDeletePermission: Boolean!
}

type RunCanceledEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

type RunCancelingEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

scalar RunConfigData

type RunConfigSchema {
  rootConfigType: ConfigType!
  allConfigTypes: [ConfigType!]!
  isRunConfigValid(
    runConfigData: RunConfigData
  ): PipelineConfigValidationResult!
  rootDefaultYaml: String!
}

union RunConfigSchemaOrError =
    RunConfigSchema
  | PipelineNotFoundError
  | InvalidSubsetError
  | ModeNotFoundError
  | PythonError
type RunConfigValidationInvalid implements PipelineConfigValidationInvalid {
  pipelineName: String!
  errors: [PipelineConfigValidationError!]!
}

type RunConflict implements Error & PipelineRunConflict {
  message: String!
}

type RunDequeuedEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

type RunEnqueuedEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

interface RunEvent {
  pipelineName: String!
}

type RunFailureEvent implements MessageEvent & RunEvent & ErrorEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
  error: PythonError
}

type RunGroup {
  rootRunId: String!
  runs: [Run]
}

type RunGroupNotFoundError implements Error {
  message: String!
  runId: String!
}

union RunGroupOrError = RunGroup | RunGroupNotFoundError | PythonError
type RunGroups {
  results: [RunGroup!]!
}

type RunGroupsOrError {
  results: [RunGroup!]!
}

type RunLauncher {
  name: String!
}

type RunMarker {
  startTime: Float
  endTime: Float
}

type RunNotFoundError implements PipelineRunNotFoundError & Error {
  runId: String!
  message: String!
}

union RunOrError = Run | RunNotFoundError | PythonError
type RunRequest {
  runKey: String
  tags: [PipelineTag!]!
  runConfigYaml: String!
  assetSelection: [AssetKey!]
}

type Runs implements PipelineRuns {
  results: [Run!]!
  count: Int
}

input RunsFilter {
  runIds: [String]
  pipelineName: String
  tags: [ExecutionTag!]
  statuses: [RunStatus!]
  snapshotId: String
  updatedAfter: Float
  createdBefore: Float
  mode: String
}

union RunsOrError = Runs | InvalidPipelineRunsFilterError | PythonError
type RunStartEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

type RunStartingEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

type RunStatsSnapshot implements PipelineRunStatsSnapshot {
  id: String!
  runId: String!
  stepsSucceeded: Int!
  stepsFailed: Int!
  materializations: Int!
  expectations: Int!
  enqueuedTime: Float
  launchTime: Float
  startTime: Float
  endTime: Float
}

union RunStatsSnapshotOrError = RunStatsSnapshot | PythonError
enum RunStatus {
  QUEUED
  NOT_STARTED
  MANAGED
  STARTING
  STARTED
  SUCCESS
  FAILURE
  CANCELING
  CANCELED
}

type RunStepStats implements PipelineRunStepStats {
  runId: String!
  stepKey: String!
  status: StepEventStatus
  startTime: Float
  endTime: Float
  materializations: [MaterializationEvent!]!
  expectationResults: [ExpectationResult!]!
  attempts: [RunMarker!]!
  markers: [RunMarker!]!
}

type RunSuccessEvent implements MessageEvent & RunEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  pipelineName: String!
}

type RunTagKeys {
  keys: [String!]!
}

union RunTagKeysOrError = PythonError | RunTagKeys
type RunTags {
  tags: [PipelineTagAndValues!]!
}

union RunTagsOrError = PythonError | RunTags
type RuntimeMismatchConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  valueRep: String
}

type ScalarUnionConfigType implements ConfigType {
  key: String!
  description: String
  recursiveConfigTypes: [ConfigType!]!
  typeParamKeys: [String!]!
  isSelector: Boolean!
  scalarType: ConfigType!
  nonScalarType: ConfigType!
  scalarTypeKey: String!
  nonScalarTypeKey: String!
}

type Schedule {
  id: ID!
  name: String!
  cronSchedule: String!
  pipelineName: String!
  solidSelection: [String]
  mode: String!
  executionTimezone: String
  description: String
  scheduleState: InstigationState!
  partitionSet: PartitionSet
  futureTicks(cursor: Float, limit: Int, until: Float): DryRunInstigationTicks!
  futureTick(tickTimestamp: Int!): DryRunInstigationTick!
  potentialTickTimestamps(
    startTimestamp: Float
    upperLimit: Int
    lowerLimit: Int
  ): [Float!]!
}

type ScheduleData {
  cronSchedule: String!
  startTimestamp: Float
}

union ScheduleDryRunResult = DryRunInstigationTick | PythonError | ScheduleNotFoundError
union ScheduleMutationResult = PythonError | UnauthorizedError | ScheduleStateResult
type ScheduleNotFoundError implements Error {
  message: String!
  scheduleName: String!
}

union ScheduleOrError = Schedule | ScheduleNotFoundError | PythonError
type Scheduler {
  schedulerClass: String
}

type SchedulerNotDefinedError implements Error {
  message: String!
}

union SchedulerOrError = Scheduler | SchedulerNotDefinedError | PythonError
type Schedules {
  results: [Schedule!]!
}

input ScheduleSelector {
  repositoryName: String!
  repositoryLocationName: String!
  scheduleName: String!
}

union SchedulesOrError = Schedules | RepositoryNotFoundError | PythonError
type ScheduleStateResult {
  scheduleState: InstigationState!
}

enum ScheduleStatus {
  RUNNING
  STOPPED
  ENDED
}

type ScheduleTick {
  tickId: String!
  status: InstigationTickStatus!
  timestamp: Float!
  tickSpecificData: ScheduleTickSpecificData
}

type ScheduleTickFailureData {
  error: PythonError!
}

union ScheduleTickSpecificData = ScheduleTickSuccessData | ScheduleTickFailureData
type ScheduleTickSuccessData {
  run: Run
}

type SelectorTypeConfigError implements PipelineConfigValidationError {
  message: String!
  path: [String!]!
  stack: EvaluationStack!
  reason: EvaluationErrorReason!
  incomingFields: [String!]!
}

type Sensor {
  id: ID!
  jobOriginId: String!
  name: String!
  targets: [Target!]
  sensorState: InstigationState!
  minIntervalSeconds: Int!
  description: String
  nextTick: DryRunInstigationTick
  metadata: SensorMetadata!
  sensorType: SensorType!
}

type SensorData {
  lastTickTimestamp: Float
  lastRunKey: String
  lastCursor: String
}

union SensorDryRunResult = PythonError | SensorNotFoundError | DryRunInstigationTick
type SensorMetadata {
  assetKeys: [AssetKey!]
}

type SensorNotFoundError implements Error {
  message: String!
  sensorName: String!
}

union SensorOrError = Sensor | SensorNotFoundError | UnauthorizedError | PythonError
type Sensors {
  results: [Sensor!]!
}

input SensorSelector {
  repositoryName: String!
  repositoryLocationName: String!
  sensorName: String!
}

union SensorsOrError = Sensors | RepositoryNotFoundError | PythonError
enum SensorType {
  STANDARD
  RUN_STATUS
  ASSET
  MULTI_ASSET
  FRESHNESS_POLICY
  UNKNOWN
}

type SetSensorCursorMutation {
  Output: SensorOrError!
}

type ShutdownRepositoryLocationMutation {
  Output: ShutdownRepositoryLocationMutationResult!
}

union ShutdownRepositoryLocationMutationResult =
    ShutdownRepositoryLocationSuccess
  | RepositoryLocationNotFound
  | UnauthorizedError
  | PythonError
type ShutdownRepositoryLocationSuccess {
  repositoryLocationName: String!
}

type Solid {
  name: String!
  definition: ISolidDefinition!
  inputs: [Input!]!
  outputs: [Output!]!
  isDynamicMapped: Boolean!
}

interface SolidContainer {
  id: ID!
  name: String!
  description: String
  solids: [Solid!]!
  solidHandle(handleID: String!): SolidHandle
  solidHandles(parentHandleID: String): [SolidHandle!]!
  modes: [Mode!]!
}

type SolidDefinition implements ISolidDefinition {
  name: String!
  description: String
  metadata: [MetadataItemDefinition!]!
  inputDefinitions: [InputDefinition!]!
  outputDefinitions: [OutputDefinition!]!
  assetNodes: [AssetNode!]!
  configField: ConfigTypeField
  requiredResources: [ResourceRequirement!]!
}

type SolidHandle {
  handleID: String!
  solid: Solid!
  parent: SolidHandle
  stepStats(limit: Int): SolidStepStatsOrError
}

type SolidStepStatsConnection {
  nodes: [RunStepStats!]!
}

union SolidStepStatsOrError = SolidStepStatsConnection | SolidStepStatusUnavailableError
type SolidStepStatusUnavailableError implements Error {
  message: String!
}

type StaleCause {
  key: AssetKey!
  category: StaleCauseCategory!
  reason: String!
  dependency: AssetKey
}

enum StaleCauseCategory {
  CODE
  DATA
  DEPENDENCIES
}

enum StaleStatus {
  MISSING
  STALE
  FRESH
}

type StartScheduleMutation {
  Output: ScheduleMutationResult!
}

interface StepEvent {
  stepKey: String
  solidHandleID: String
}

enum StepEventStatus {
  SKIPPED
  SUCCESS
  FAILURE
  IN_PROGRESS
}

input StepExecution {
  stepKey: String!
  marshalledInputs: [MarshalledInput!]
  marshalledOutputs: [MarshalledOutput!]
}

type StepExpectationResultEvent implements MessageEvent & StepEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  expectationResult: ExpectationResult!
}

enum StepKind {
  COMPUTE
  UNRESOLVED_MAPPED
  UNRESOLVED_COLLECT
}

input StepOutputHandle {
  stepKey: String!
  outputName: String!
}

type StepWorkerStartedEvent implements MessageEvent & DisplayableEvent & StepEvent & MarkerEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  markerStart: String
  markerEnd: String
}

type StepWorkerStartingEvent implements MessageEvent & DisplayableEvent & StepEvent & MarkerEvent {
  runId: String!
  message: String!
  timestamp: String!
  level: LogLevel!
  stepKey: String
  solidHandleID: String
  eventType: DagsterEventType
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  markerStart: String
  markerEnd: String
}

type StopRunningScheduleMutation {
  Output: ScheduleMutationResult!
}

type StopSensorMutation {
  Output: StopSensorMutationResultOrError!
}

type StopSensorMutationResult {
  instigationState: InstigationState
}

union StopSensorMutationResultOrError = StopSensorMutationResult | UnauthorizedError | PythonError
type Table {
  schema: TableSchema!
  records: [String!]!
}

type TableColumn {
  name: String!
  type: String!
  description: String
  constraints: TableColumnConstraints!
}

type TableColumnConstraints {
  nullable: Boolean!
  unique: Boolean!
  other: [String!]!
}

type TableConstraints {
  other: [String!]!
}

type TableMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  table: Table!
}

type TableSchema {
  constraints: TableConstraints
  columns: [TableColumn!]!
}

type TableSchemaMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  schema: TableSchema!
}

type Target {
  pipelineName: String!
  mode: String!
  solidSelection: [String!]
}

interface TerminatePipelineExecutionFailure {
  run: Run!
  message: String!
}

interface TerminatePipelineExecutionSuccess {
  run: Run!
}

type TerminateRunFailure implements TerminatePipelineExecutionFailure {
  run: Run!
  message: String!
}

type TerminateRunMutation {
  Output: TerminateRunResult!
}

enum TerminateRunPolicy {
  SAFE_TERMINATE
  MARK_AS_CANCELED_IMMEDIATELY
}

union TerminateRunResult =
    TerminateRunSuccess
  | TerminateRunFailure
  | RunNotFoundError
  | UnauthorizedError
  | PythonError
type TerminateRunSuccess implements TerminatePipelineExecutionSuccess {
  run: Run!
}

type TestFields {
  alwaysException: String
}

type TextMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  text: String!
}

type TickEvaluation {
  dynamicPartitionsRequests: [DynamicPartitionRequest!]
  runRequests: [RunRequest!]
  skipReason: String
  error: PythonError
  cursor: String
}

type TimePartitionRangeStatus {
  startTime: Float!
  endTime: Float!
  startKey: String!
  endKey: String!
  status: PartitionRangeStatus!
}

type TimePartitionStatuses {
  ranges: [TimePartitionRangeStatus!]!
}

type TypeCheck implements DisplayableEvent {
  label: String
  description: String
  metadataEntries: [MetadataEntry!]!
  success: Boolean!
}

type UnauthorizedError implements Error {
  message: String!
}

type UnknownPipeline implements PipelineReference {
  name: String!
  solidSelection: [String!]
}

type UnpartitionedAssetStatus {
  assetKey: AssetKey!
  inProgress: Boolean!
  materialized: Boolean!
  failed: Boolean!
}

type UrlMetadataEntry implements MetadataEntry {
  label: String!
  description: String
  url: String!
}

type UsedSolid {
  definition: ISolidDefinition!
  invocations: [NodeInvocationSite!]!
}

type Workspace {
  id: String!
  locationEntries: [WorkspaceLocationEntry!]!
}

type WorkspaceLocationEntry {
  id: ID!
  name: String!
  locationOrLoadError: RepositoryLocationOrLoadError
  loadStatus: RepositoryLocationLoadStatus!
  displayMetadata: [RepositoryMetadata!]!
  updatedTimestamp: Float!
  permissions: [Permission!]!
}

type WorkspaceLocationStatusEntries {
  entries: [WorkspaceLocationStatusEntry!]!
}

union WorkspaceLocationStatusEntriesOrError = WorkspaceLocationStatusEntries | PythonError
type WorkspaceLocationStatusEntry {
  id: ID!
  name: String!
  loadStatus: RepositoryLocationLoadStatus!
  updateTimestamp: Float!
}

union WorkspaceOrError = Workspace | PythonError
interface WrappingConfigType {
  ofType: ConfigType!
}

interface WrappingDagsterType {
  ofType: DagsterType!
}

